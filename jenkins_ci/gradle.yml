pipeline {
    agent any

    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${JAVA_HOME}/bin:${PATH}"
        WORKDIR = './backend'
        SONAR_HOST_URL = 'http://localhost:9000/'
        SONAR_TOKEN = credentials('sonarqube-token')
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'danielsheh/cinema_cinemaapp'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/danielsheh02/cinema'
            }
        }

        stage('Build') {
            steps {
                dir(env.WORKDIR) {
                    sh './gradlew build -x test'
                }
                stash name: 'backend-build', includes: 'backend/build/**/*'
            }
        }

        stage('Test') {
            steps {
                dir(env.WORKDIR) {
                    unstash 'backend-build'
                    sh './gradlew test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir(env.WORKDIR) {
                    withSonarQubeEnv('sonar-cinema') {
                        sh """
                        ./gradlew sonar \
                          -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                          -Dsonar.qualitygate.wait=true
                        """
                    }
                }
            }
        }

        stage('Build image and Push') {
            steps {
                dir(env.WORKDIR) {
                    withCredentials([usernamePassword(credentialsId: 'log-docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
                            docker build -t $DOCKER_IMAGE .
                            docker tag $DOCKER_IMAGE $DOCKER_IMAGE:latest
                            docker push $DOCKER_IMAGE:latest
                        '''
                    }
                }
            }
        }

    }

    post {
        always {
            dir(env.WORKDIR) {
                junit 'build/test-results/**/*.xml'
                archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
            }
        }
    }
}
