plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id "org.sonarqube" version "6.2.0.5505"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-config'
	implementation 'org.springframework.security:spring-security-web'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	// compileOnly 'javax.servlet:servlet-api:2.5'
	// implementation 'com.sun.xml.bind:jaxb-impl:4.0.1'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
	implementation 'javax.xml.bind:jaxb-api:2.3.0'
	implementation 'jakarta.persistence:jakarta.persistence-api'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework:spring-web'
	implementation 'org.postgresql:postgresql:42.6.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

	implementation 'org.telegram:telegrambots-spring-boot-starter:6.5.0'
	implementation 'org.telegram:telegrambots:6.5.0'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

	classDirectories.setFrom(
        files([
            fileTree(dir: "$buildDir/classes/java/main", includes: [
                'com/app/cinema/services/MovieService.class',
				'com/app/cinema/controllers/MovieController.class',
            ], excludes: [
                'com/app/cinema/controllers/MovieController.deleteMovie',
                'com/app/cinema/controllers/MovieController.getMovie',
            ])
        ])
    )
}

test {
    finalizedBy jacocoTestReport
}

sonar {
  properties {
    property "sonar.projectKey", "cinema-backend"
    property "sonar.projectName", "cinema app"
	property "sonar.qualitygate.wait", "true"
	property "sonar.inclusions",  '''
		src/main/java/com/app/cinema/controllers/MovieController.java,
		src/main/java/com/app/cinema/services/MovieService.java
	'''
  }
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
    archiveFileName = 'app.jar'
}